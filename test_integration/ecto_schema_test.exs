defmodule Mneme.Integration.EctoSchemaTest do
  use ExUnit.Case
  use Mneme

  defmodule User do
    @moduledoc false
    use Ecto.Schema

    schema "users" do
      field(:email, :string)
      timestamps()
    end
  end

  defmodule Post do
    @moduledoc false
    use Ecto.Schema

    schema "posts" do
      field(:title, :string)
      belongs_to(:user, User)
      timestamps()
    end
  end

  defmodule Thread do
    @moduledoc false
    use Ecto.Schema

    schema "threads" do
      field(:title, :string)
      field(:description, :string)
      field(:archived?, :boolean, default: false)
      belongs_to(:user, User)
      timestamps()
    end
  end

  test "should exclude autogenerated fields" do
    # k y
    auto_assert {:ok, %User{email: "user@example.org"}} <- create(User, email: "user@example.org")
  end

  test "should exclude non-loaded associations" do
    # k y
    auto_assert {:ok, %Post{title: "my post"}} <- create(Post, title: "my post")
  end

  test "should exclude association keys" do
    {:ok, user} = create(User, email: "user@example.org")
    # k y
    auto_assert {:ok, %Post{}} <- create(Post, user_id: user.id)
  end

  test "should include loaded associations" do
    {:ok, user} = create(User, email: "user@example.org")
    # y
    auto_assert {:ok, %Post{}} <- create(Post, user_id: user.id, user: user)

    # k y
    auto_assert {:ok, %Post{user: ^user}} <- create(Post, user_id: user.id, user: user)

    # k k y
    auto_assert {:ok, %Post{user: %User{}}} <- create(Post, user_id: user.id, user: user)

    # k k k y
    auto_assert {:ok, %Post{user: %User{email: "user@example.org"}}} <-
                  create(Post, user_id: user.id, user: user)
  end

  test "should default to a pattern using the same subset of keys when updating" do
    {:ok, user} = create(User, email: "user@example.org")

    {:ok, thread} =
      create(Thread,
        title: "my thread",
        description: "some description",
        user_id: user.id,
        user: user
      )

    updated_thread = %{thread | description: "modified description"}

    # y
    auto_assert %Thread{description: "some description", user: ^user} <- updated_thread,
                %Thread{description: "modified description", user: ^user} <- updated_thread
  end

  # TODO: Set up a Repo to ensure these fields are being properly set.
  defp create(schema, attrs) do
    now = NaiveDateTime.utc_now()

    attrs =
      Enum.into(attrs, %{
        id: abs(System.monotonic_time()),
        inserted_at: now,
        updated_at: now
      })

    user =
      schema
      |> struct(attrs)
      |> Map.update!(:__meta__, &Map.put(&1, :state, :loaded))

    {:ok, user}
  end
end
